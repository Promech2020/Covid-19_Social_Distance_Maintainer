# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Social_distance_maintainer.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QLineEdit, QDialog, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QFileDialog , QLabel, QTextEdit, QMessageBox
from pre_processing import pre_process

class Ui_MainWindow(QWidget):
    file_path = ""
    time_to_wait_before = ""
    audio_path = ""

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(400, 220)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(400, 220))
        MainWindow.setMaximumSize(QtCore.QSize(400, 220))
        font = QtGui.QFont()
        font.setPointSize(10)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(0, 10, 400, 200))
        self.groupBox.setMinimumSize(QtCore.QSize(400, 200))
        self.groupBox.setMaximumSize(QtCore.QSize(400, 200))
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.verticalLayout.setContentsMargins(10, 10, 10, 10)
        self.verticalLayout.setSpacing(10)
        self.verticalLayout.setObjectName("verticalLayout")
        self.groupBox1 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox1.setObjectName("groupBox1")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.groupBox1)
        self.horizontalLayout.setContentsMargins(10, 5, 10, 5)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.input_video_type_label = QtWidgets.QLabel(self.groupBox1)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.input_video_type_label.setFont(font)
        self.input_video_type_label.setObjectName("input_video_type_label")
        self.horizontalLayout.addWidget(self.input_video_type_label)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.browse_webcam = QtWidgets.QPushButton(self.groupBox1)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.browse_webcam.setFont(font)
        self.browse_webcam.setObjectName("browse_webcam")
        self.horizontalLayout.addWidget(self.browse_webcam)
        self.browse_video = QtWidgets.QPushButton(self.groupBox1)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.browse_video.setFont(font)
        self.browse_video.setObjectName("browse_video")
        self.horizontalLayout.addWidget(self.browse_video)
        self.demoButton = QtWidgets.QPushButton(self.groupBox1)
        self.demoButton.setObjectName("demoButton")
        self.horizontalLayout.addWidget(self.demoButton)
        self.verticalLayout.addWidget(self.groupBox1)
        self.groupBox2 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox2.setObjectName("groupBox2")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.groupBox2)
        self.horizontalLayout_6.setContentsMargins(10, 5, 10, 5)
        self.horizontalLayout_6.setSpacing(0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.time_to_wait_label = QtWidgets.QLabel(self.groupBox2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.time_to_wait_label.setFont(font)
        self.time_to_wait_label.setObjectName("time_to_wait_label")
        self.horizontalLayout_6.addWidget(self.time_to_wait_label)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem1)
        self.time_to_wait_combobox = QtWidgets.QComboBox(self.groupBox2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.time_to_wait_combobox.setFont(font)
        self.time_to_wait_combobox.setObjectName("time_to_wait_combobox")
        self.time_to_wait_combobox.addItem("")
        self.time_to_wait_combobox.addItem("")
        self.time_to_wait_combobox.addItem("")
        self.time_to_wait_combobox.addItem("")
        self.time_to_wait_combobox.addItem("")
        self.time_to_wait_combobox.addItem("")
        self.time_to_wait_combobox.addItem("")
        self.time_to_wait_combobox.addItem("")
        self.time_to_wait_combobox.addItem("")
        self.time_to_wait_combobox.addItem("")
        self.time_to_wait_combobox.addItem("")
        self.time_to_wait_combobox.addItem("")
        self.horizontalLayout_6.addWidget(self.time_to_wait_combobox)
        self.time_to_wait_units = QtWidgets.QLabel(self.groupBox2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.time_to_wait_units.setFont(font)
        self.time_to_wait_units.setObjectName("time_to_wait_units")
        self.horizontalLayout_6.addWidget(self.time_to_wait_units)
        self.verticalLayout.addWidget(self.groupBox2)
        self.groupBox3 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox3.setObjectName("groupBox3")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.groupBox3)
        self.horizontalLayout_5.setContentsMargins(10, 5, 10, 5)
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.alert_file_label = QtWidgets.QLabel(self.groupBox3)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.alert_file_label.setFont(font)
        self.alert_file_label.setObjectName("alert_file_label")
        self.horizontalLayout_5.addWidget(self.alert_file_label)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem2)
        self.browse_audio = QtWidgets.QPushButton(self.groupBox3)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.browse_audio.setFont(font)
        self.browse_audio.setObjectName("browse_audio")
        self.horizontalLayout_5.addWidget(self.browse_audio)
        self.verticalLayout.addWidget(self.groupBox3)
        self.groupBox4 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox4.setObjectName("groupBox4")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.groupBox4)
        self.horizontalLayout_4.setContentsMargins(10, 5, 10, 5)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem3)
        self.proceed_button = QtWidgets.QPushButton(self.groupBox4)
        self.proceed_button.setObjectName("proceed_button")
        self.horizontalLayout_4.addWidget(self.proceed_button)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem4)
        self.verticalLayout.addWidget(self.groupBox4)
        MainWindow.setCentralWidget(self.centralwidget)

        #Calling functions:
        self.browse_webcam.clicked.connect(self.webcam_clicked)
        self.browse_video.clicked.connect(lambda: self.browse_files("Video files (*.mp4 *.avi)"))
        self.demoButton.clicked.connect(self.show_pop_up_demo)
        self.browse_audio.clicked.connect(lambda: self.browse_files("Audio files (*.wav)"))
        self.proceed_button.clicked.connect(self.proceed_processing)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 400, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
    def webcam_clicked(self):
        self.ip_camera_link = QDialog()
        # add a vertical layout to dialog
        self.vlayout = QVBoxLayout()
        # add a horizontal layout to take user inputs(URL).
        self.hlayout1 = QHBoxLayout()
        # add a horizontal layout for buttons.
        self.hlayout2 = QHBoxLayout()

        self.ip_camera_link.setLayout(self.vlayout)
        self.vlayout.addLayout(self.hlayout1)
        self.vlayout.addLayout(self.hlayout2)

        # add the items to layout instead of dialog
        self.ipCam_address_label = QLabel("IP Camera URL:", self.ip_camera_link)
        self.hlayout1.addWidget(self.ipCam_address_label)

        self.ipCam_address = QLineEdit(self.ip_camera_link)
        self.hlayout1.addWidget(self.ipCam_address)

        # add a vertical layout to dialog
        self.okButton1 = QPushButton("OK", self.ip_camera_link)
        self.hlayout2.addWidget(self.okButton1)
        self.cancelButton1 = QPushButton("Cancel", self.ip_camera_link)
        self.hlayout2.addWidget(self.cancelButton1)
        
        self.ip_camera_link.setWindowTitle("Get Link")
        self.ip_camera_link.show()
        
        self.okButton1.clicked.connect(lambda: self.ok_pressed(self.ipCam_address.text(), self.ip_camera_link))
        self.cancelButton1.clicked.connect(lambda: self.cancel_pressed(self.ip_camera_link))
    
    def browse_files(self, title):
        fname = QFileDialog.getOpenFileName(self, 'Open file','', title)
        if fname[0].endswith(".wav"):
            self.audio_path = fname[0]
        else:
            self.file_path = fname[0]

    def ok_pressed(self, ipcam_url, dialog ):
        if ipcam_url == "":
            self.title = "No Ip Camera Link Provided"
            self.info = "You have not provided Ip camera link. Do you wish to go with your webcam?"
            self.show_pop_up_4(self.title, self.info)
            dialog.close()
        else:
            self.file_path = ipcam_url
            dialog.close()

    def cancel_pressed(self, dialog):
        dialog.close()

    def proceed_processing(self):
        #Getting user inputs:
        self.time_to_wait_before = self.time_to_wait_combobox.currentText()
        
        if self.file_path == "" and self.audio_path == "":
            self.title = "No video and audio path."
            self.info = "You have not provided us video and audio path."
            self.show_pop_up_3(self.title, self.info)

        elif self.file_path == "WebCam" and self.audio_path == "":
            self.title = "No audio filepath."
            self.info = "You have not provided us audio file path. Do you wish to go with our default values?"
            self.show_pop_up_1(self.title, self.info)

        elif self.audio_path=="":
            self.title = "No Audio Path"
            self.info = "You have not provided us audio file path to play warning. Do you wish to go with our default audio?"
            self.show_pop_up_1(self.title, self.info)

        else:
            self.show_pop_up_2()

    def show_pop_up_demo(self):
        self.msg_demo = QMessageBox()
        self.msg_demo.setWindowTitle("Demo video")
        self.msg_demo.setText("All the settings will be our default values.")
        self.msg_demo.setIcon(QMessageBox.Warning)
        self.msg_demo.setStandardButtons(QMessageBox.Ok|QMessageBox.Cancel)
        self.msg_demo.setDefaultButton(QMessageBox.Cancel)
        self.msg_demo.buttonClicked.connect(self.pop_up_button_demo)
        x1 = self.msg_demo.exec_()

    def pop_up_button_demo(self, i):
        if i.text() == "OK":
            self.msg_demo.close()
            MainWindow.close()
            self.time_to_wait_before = self.time_to_wait_combobox.currentText()
            pre_process(self.file_path, self.time_to_wait_before, self.audio_path)
            
    def show_pop_up_1(self, title = "Demo video", info ="All the settings will be our default values."):
        self.msg1 = QMessageBox()
        self.msg1.setWindowTitle(title)
        self.msg1.setText(info)
        self.msg1.setIcon(QMessageBox.Warning)
        self.msg1.setStandardButtons(QMessageBox.Ok|QMessageBox.Cancel)
        self.msg1.setDefaultButton(QMessageBox.Cancel)
        self.msg1.buttonClicked.connect(self.pop_up_button1)
        x1 = self.msg1.exec_()

    def pop_up_button1(self, i):
        if i.text() == "OK":
            self.msg1.close()
            MainWindow.close()
            self.time_to_wait_before = self.time_to_wait_combobox.currentText()
            pre_process(self.file_path, self.time_to_wait_before, self.audio_path)
            

    def show_pop_up_2(self):
        self.msg2 = QMessageBox()
        self.msg2.setWindowTitle("Confirmation")
        self.msg2.setText(f"Your have selected:\n \
            {self.file_path} as video input.\n \
            {self.time_to_wait_before} as time to wait before starting to play warning. \n \
            {self.audio_path} as audio file to play warning.")
        self.msg2.setIcon(QMessageBox.Information)
        self.msg2.setStandardButtons(QMessageBox.Ok|QMessageBox.Cancel)
        self.msg2.setDefaultButton(QMessageBox.Cancel)
        self.msg2.buttonClicked.connect(self.pop_up_button2)
        x2 = self.msg2.exec_()

    def pop_up_button2(self, j):
        if j.text() == "OK":
            self.msg2.close()
            MainWindow.close()
            pre_process(self.file_path, self.time_to_wait_before, self.audio_path)
    
    def show_pop_up_3(self, title, message):
        self.msg3 = QMessageBox()
        self.msg3.setWindowTitle(title)
        self.msg3.setText(message)
        self.msg3.setIcon(QMessageBox.Critical)
        self.msg3.setStandardButtons(QMessageBox.Ok)
        self.msg3.setDefaultButton(QMessageBox.Ok)
        self.msg3.buttonClicked.connect(self.pop_up_button3)
        x1 = self.msg3.exec_()

    def pop_up_button3(self, i):
        if i.text() == "OK":
            self.msg3.close()

    def show_pop_up_4(self, title, message):
        self.msg4 = QMessageBox()
        self.msg4.setWindowTitle(title)
        self.msg4.setText(message)
        self.msg4.setIcon(QMessageBox.Warning)
        self.msg4.setStandardButtons(QMessageBox.Ok|QMessageBox.Cancel)
        self.msg4.setDefaultButton(QMessageBox.Cancel)
        self.msg4.buttonClicked.connect(self.pop_up_button4)
        x1 = self.msg4.exec_()

    def pop_up_button4(self, i):
        if i.text() == "OK":
            self.file_path = "WebCam"
            self.msg4.close()
        else:
            self.file_path = ""

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Social Distance Maintainer"))
        self.input_video_type_label.setText(_translate("MainWindow", "Input video type:"))
        self.browse_webcam.setText(_translate("MainWindow", "WebCam"))
        self.browse_video.setText(_translate("MainWindow", "Browse"))
        self.demoButton.setText(_translate("MainWindow", "Demo"))
        self.time_to_wait_label.setText(_translate("MainWindow", "Time to wait:"))
        self.time_to_wait_combobox.setItemText(0, _translate("MainWindow", "5"))
        self.time_to_wait_combobox.setItemText(1, _translate("MainWindow", "10"))
        self.time_to_wait_combobox.setItemText(2, _translate("MainWindow", "15"))
        self.time_to_wait_combobox.setItemText(3, _translate("MainWindow", "20"))
        self.time_to_wait_combobox.setItemText(4, _translate("MainWindow", "25"))
        self.time_to_wait_combobox.setItemText(5, _translate("MainWindow", "30"))
        self.time_to_wait_combobox.setItemText(6, _translate("MainWindow", "35"))
        self.time_to_wait_combobox.setItemText(7, _translate("MainWindow", "40"))
        self.time_to_wait_combobox.setItemText(8, _translate("MainWindow", "45"))
        self.time_to_wait_combobox.setItemText(9, _translate("MainWindow", "50"))
        self.time_to_wait_combobox.setItemText(10, _translate("MainWindow", "55"))
        self.time_to_wait_combobox.setItemText(11, _translate("MainWindow", "60"))
        self.time_to_wait_units.setText(_translate("MainWindow", "Seconds"))
        self.alert_file_label.setText(_translate("MainWindow", "Alert file:"))
        self.browse_audio.setText(_translate("MainWindow", "Browse .wav"))
        self.proceed_button.setText(_translate("MainWindow", "Proceed"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
